apply plugin: 'com.android.application'
//必须
apply plugin: 'kotlin-android'
//快捷的findviewfindid操作，建议加上
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a', 'x86'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }

        manifestPlaceholders = [
                channel      : "channel_name",
                app_type     : "b2b",
                encrypt      : "0",
                open_server  : "true",
                accept_encoding  : "gzip",
                JPUSH_PKGNAME: rootProject.ext.android.applicationId,
                JPUSH_APPKEY : rootProject.ext.push.JPUSH_APPKEY,
                JPUSH_CHANNEL : rootProject.ext.push.JPUSH_CHANNEL,
        ]
    }
    dexOptions {
        javaMaxHeapSize "2048M"
    }
    sourceSets {
        main {
            resources.srcDirs = ['src/main/resources', 'src/main/resources/']
            jniLibs.srcDirs = ['libs']
        }
    }
    buildTypes {
        debug {
//            signingConfig signingConfigs.myConfig
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
//            signingConfig signingConfigs.myConfig
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}
/*configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.1.0'
            }
        }
    }
}*/
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':common')
    annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]
    debugCompile rootProject.ext.dependencies["leakcanary-android"]
    releaseCompile rootProject.ext.dependencies["leakcanary-android-no-op"]
    annotationProcessor rootProject.ext.dependencies["dagger-android-processor"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    compile rootProject.ext.dependencies["multidex"]
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}
